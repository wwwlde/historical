;------------------------------------------------;
; Программа для вычисления суммы произведений
; (dx * m) и добавления начального значения s
;------------------------------------------------;
; Автор: Денис Лемешко (Z26114)
; Группа: 261
;------------------------------------------------;

; Стек
stk segment stack 'stack'
  dw 64 dup(?)  ; Выделение памяти для стека (64 байта)
stk ends

; Данные
dat segment 'data'
  s dw ?         ; Переменная для хранения значения суммы
  m db 5         ; Значение m (5)
  sum dw 0       ; Переменная для хранения суммы произведений
dat ends

; Код программы
cd segment 'code'
  assume cs:cd, ds:dat, ss:stk

; Устанавливаем сегмент данных в DS
begin:
  mov ax, dat     ; Загружаем адрес сегмента данных в регистр AX
  mov ds, ax      ; Устанавливаем сегмент данных (DS)

; Инициализация регистров
  xor ax, ax      ; Обнуляем регистр AX
  xor bx, bx      ; Обнуляем регистр BX
  xor cx, cx      ; Обнуляем регистр CX
  xor dx, dx      ; Обнуляем регистр DX

; Первоначальная инициализация
  mov al, 2       ; Устанавливаем значение AL = 2
  mov cl, m       ; Загружаем значение m (5) в CL
  mov bl, m       ; Загружаем значение m (5) в BL
  imul bl         ; Умножаем AL * BL (AX = AL * BL)
  mov s, ax       ; Сохраняем результат в переменную s
  jcxz exit       ; Если CX = 0, выходим из программы

; Цикл вычислений
  mov dx, 0       ; Устанавливаем DX = 0
cycl:
  inc dx          ; Увеличиваем DX на 1
  mov ax, dx      ; Загружаем значение DX в AX
  mov bl, m       ; Загружаем значение m в BL
  imul bl         ; Умножаем AX = DX * m
  add sum, ax     ; Прибавляем результат к переменной sum

  loop cycl       ; Повторяем цикл, пока CX не станет равным 0

; Завершающие вычисления
  mov ax, sum     ; Загружаем сумму в AX
  add ax, s       ; Прибавляем к результату значение s
  mov s, ax       ; Сохраняем итоговый результат в s

exit:
  mov ah, 4ch     ; Завершаем программу с кодом возврата 4Ch
  int 21h         ; Прерывание для завершения программы
cd ends
end begin
;------------------------------------------------;
